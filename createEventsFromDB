#!/bin/bash

################################################################################
# Create events from the entries in FSDB, sort them and insert into event file #
################################################################################

WD="$HOME/Git/trackMe"
CLIENTS="trackmedata"
EVENT_FILE="$WD/event_file"
FINAL_EVENT_FILE="$WD/events"
DATE_FORMAT='+%a %b %e %Y %H:%M:%S %Z'

dateSecondsToFormat()
{
  date "$DATE_FORMAT" --date="@$1"
}

dateFormatToSeconds()
{
  date --date "$1" +%s
}

diff()
{
  if [ "$1" -gt "$2" ]; then
    echo "diff would be negative, this is not allowed! Wrong order of parameters?"
    return 1
  fi

  ((DIFF = $2 - $1))
  ((SECONDS = DIFF % 60))
  ((MINUTES = (DIFF % 3600) / 60))
  ((HOURS = DIFF / 3600))

	echo "$HOURS:$MINUTES:$SECONDS"
}

createEventsFromDB()
{
  for CLIENT in "$CLIENTS"/*; do

    if [ "$CLIENT" = "$CLIENTS/active" ] || [ "$CLIENT" = "$CLIENTS/events" ] || [ "$CLIENT" = "$CLIENTS/reports" ] ; then
      continue
    fi

    echo "Client: $CLIENT"

    for ACTIVITY in "$CLIENT"/*; do
      echo "Activity: $ACTIVITY"
      for ENTRY in "$ACTIVITY"/*; do
        COUNT=1
        while IFS= read -r line || [ -n "$line" ]; do
          case "$COUNT" in
            "1")
                START_TIME="$line"
                if ! START_TIME_SEC="$(dateFormatToSeconds "$(cut -d' ' -f1,2 --complement <<<"$START_TIME")")"; then
                  echo "ERROR: start time <$START_TIME> is invalid!"
                  exit
                fi
              ;;
            "2")
                END_TIME="$line"
                if ! END_TIME_SEC="$(dateFormatToSeconds "$(cut -d' ' -f1,2 --complement <<<"$END_TIME")")"; then
                  echo "ERROR: end time <$END_TIME> is invalid!" exit
                fi
              ;;
            "3")
                DURATION="$(cut -d' ' -f2 <<<"$line")"
                printf '%s %s %s %s %s %s\n' \
                  "$START_TIME_SEC" \
                  "$END_TIME_SEC" \
                  "$DURATION" \
                  "${ENTRY##*/}" \
                  "${ACTIVITY##*/}" \
                  "${CLIENT##*/}" >> "$EVENT_FILE"
                ((COUNT = 0))
              ;;
            *)
                echo "Error, count is too high"
              ;;
          esac
          ((COUNT = COUNT + 1))
        done<"$ENTRY"
      done
    done
  done

  sort -n "$EVENT_FILE" > "${EVENT_FILE}-sorted"

  while read -r line; do
    START_TIME="$(dateSecondsToFormat "$(cut -d' ' -f1 <<<"$line")")"
    END_TIME="$(dateSecondsToFormat "$(cut -d' ' -f2 <<<"$line")")"
    DURATION="$(cut -d' ' -f3 <<<"$line")"
    ACTIVITY="$(cut -d' ' -f4 <<<"$line")"
    PROJECT="$(cut -d' ' -f5 <<<"$line")"
    CLIENT="$(cut -d' ' -f6 <<<"$line")"

    printf '%s\n%s\n%s\n%s\n%s\n%s\n' \
      "Duration: $DURATION" \
      "Ended at $END_TIME" \
      "Started at $START_TIME" \
      "Activity: $ACTIVITY" \
      "Project: $PROJECT" \
      "Client: $CLIENT" >> "$FINAL_EVENT_FILE"

  done<"${EVENT_FILE}-sorted"
}

validateDurationFromEvents()
{
  while read -r line; do
    START_TIME_SEC="$(cut -d' ' -f1 <<<"$line")"
    END_TIME_SEC="$(cut -d' ' -f2 <<<"$line")"
    DURATION="$(cut -d' ' -f3 <<<"$line")"
    ACTIVITY="$(cut -d' ' -f4 <<<"$line")"
    PROJECT="$(cut -d' ' -f5 <<<"$line")"
    CLIENT="$(cut -d' ' -f6 <<<"$line")"
    REAL_DURATION="$(diff "$START_TIME_SEC" "$END_TIME_SEC")"

    if [ "$DURATION" != "$REAL_DURATION" ]; then
     echo "${ACTIVITY}@${PROJECT} by $CLIENT has invalid duration <$DURATION> - Should be $REAL_DURATION"
    fi
  done<"${EVENT_FILE}-sorted"
}

#createEventsFromDB
validateDurationFromEvents
