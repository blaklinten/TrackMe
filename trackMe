#!/bin/bash

#########################################################
# This is a script that helps me keep track of my time. #
#########################################################
# These are the configuration options
#
export GITSYNC="no"

###### TODO ######
# Fix info if    #
# git is not     #
# available      #
##################

export WD="$HOME/Git/TrackMe"
export CLIENTS="$HOME/.trackme"
export ACTIVE="$CLIENTS/active"
export EVENT_FILE="$CLIENTS/events"
export REPORTS="$CLIENTS/reports"
export FINAL_REPORT="$REPORTS/final"

export DATE_FORMAT='+%a %b %e %Y %H:%M:%S %Z'
export DATE_SHORT_FORMAT='+%a %b %e %Y'

if [[ ! -d "$CLIENTS" ]]; then
    mkdir -p "$CLIENTS"
    echo "Creating working env..."
fi

########################
# Git helper functions #
########################

gitPull()
{
	pushd "$CLIENTS" &> /dev/null || exit
	show "Git: Pulling..." &
	git pull &> /dev/null
	if [[ "$?" == "0" ]]; then
        show "Git: Pull succeeded!"
    else
        show "Git: Pull failed..."
    fi
	popd &> /dev/null || exit
}

gitPush()
{
	ACTIVITY="$1"
	PROJECT="$2"

	pushd "$CLIENTS" &> /dev/null || exit
	show "Git: Pushing $ACTIVITY, $PROJECT..." &
	git commit -am "Time entry for $ACTIVITY, $PROJECT" &> /dev/null
	git push &> /dev/null
	if [[ "$?" == "0" ]]; then
        show "Git: Push succeeded!"
    else
        show "Git: Push failed..."
    fi
	popd &> /dev/null || exit
}

gitAdd()
{
    NEW_ACTIVITY="$1"

	pushd "$CLIENTS" &> /dev/null || exit
	git add "$NEW_ACTIVITY" &> /dev/null
	popd &> /dev/null || exit

}

########################
# Date transformations #
########################

dateSecondsToFormat()
{
  date "$DATE_FORMAT" --date="@$1"
}

dateSecondsToShortFormat()
{
  date "$DATE_SHORT_FORMAT" --date="@$1"
}

dateFormatToSeconds()
{
  date --date "$1" +%s
}

dateNow()
{
  date +%s
}


####################
# Getting feedback #
####################

show()
{
	INFO="$1"
	CHOICES="$2"

  if [ -n "$3" ] && [ "$3" = "vertical-list" ]; then
    echo "$CHOICES" | sed -e 's/ /\n/g' | dmenu -l 20 -i -p "$INFO"
  else
    echo "$CHOICES" | sed -e 's/ /\n/g' | dmenu -i -p "$INFO"
  fi

}

showStatus()
{
    if [[ ! -f "$ACTIVE" ]]; then
        show "No active timer running!"
        return
    fi

    ACTIVITY=$(tail -n 3 "$ACTIVE" | head -n 1 )
    PROJECT=$(tail -n 3 "$ACTIVE" | head -n 2 | tail -n 1)
    START=$(tail -n 1 "$ACTIVE")
    END=$(dateNow)

    show "Timer running for $(parseUnderscores $ACTIVITY) on $PROJECT Started at $(dateSecondsToFormat "$START"). Running for $(diff "$START" "$END")."
}

#######################
# Text transformation #
#######################

parseSpaces()
{
    echo "$@" | sed s/\ /\_/g
}

parseUnderscores()
{
    echo "$@" | sed s/\_/\ /g
}

###############################
# Manage clients and projects #
###############################

chooseClient()
{
	SCRIPT=$1

	ANS="$(show "Choose an existing client, create a new, summarize by time or quit:" "new summarize $(ls $CLIENTS) quit")"
	CHOICE="$(parseSpaces "$ANS")"

	case "$CHOICE" in
        "quit")
            show "Exiting..."
            pkill trackMe
            exit
        ;;
        "new")
            createClient
            return
       ;;
       "summarize")
            TIME="$(show "Sum entries from when? (leave empty for 12h)")"
            sumEntries "$TIME"
            return
       ;;
       *)
            pushd "$CLIENTS" > /dev/zero || exit
            for CLIENT in *; do
                if [[ "$CLIENT" == "$CHOICE" ]]; then
                    popd > /dev/zero || exit
                    return
                fi
            done
                show "Client \"$CHOICE\" does not exist, try again or create it (n)."
                chooseClient "$SCRIPT"
       ;;
	esac
}

chooseProject()
{
	SCRIPT="$1"
	ANS="$(show "Choose an existing project, create a (n)ew or (q)uit" "$(ls $PROJECTS)")"
	CHOICE="$(parseSpaces "$ANS")"

	case $CHOICE in
    	"q")
        	exit
        ;;
    	"n")
        	createProject "$SCRIPT"
        ;;
    	*)
        	pushd "$PROJECTS" > /dev/zero || exit
        	for PROJECT in *; do
            	if [[ "$PROJECT" == "$CHOICE" ]]; then
                	"$SCRIPT" "$CHOICE"
                	popd > /dev/zero || exit
                	return
            	fi
        	done
        	show "Project \"$(parseUnderscores "$CHOICE")\" does not exist, try again or create it (n)."
            chooseProject "$SCRIPT"
            return
        ;;
	esac
}

createClient()
{
	SCRIPT="$1"
	ANS="$(show "Enter name of new client:")"
	CLIENT=$(parseSpaces "$ANS")

	mkdir "$CLIENTS/$CLIENT"

	chooseClient "$SCRIPT"
}

createProject()
{
	SCRIPT="$1"
	ANS="$(show "Enter name of new project:")"
	projectName=$(parseSpaces "$ANS")

	mkdir "$PROJECTS/$projectName"

	chooseProject "$SCRIPT"
}

#####################
# Manage Activities #
#####################

startActivity()
{
	PROJECT="$1"

	if [[ "$GITSYNC" == "yes" ]]; then
            gitPull
	fi

	ANS="$(show "What are you doing?" "new quit $(ls $PROJECTS/$PROJECT)")"
	case "$ANS" in
    	"quit")
        	show "Exiting..."
        	pkill trackMe
        	exit
       ;;
    	"new")
        	ANS=$(show "Enter name of new activity:")
       ;;
	esac
	ACTIVITY=$(parseSpaces "$ANS")

	if [[ "$ACTIVITY" == "" ]]; then
    	show "You must enter a valid activity name."
    	startActivity "$PROJECT"
    	return
	fi

	START=$(dateNow)
  printf '%s\n%s\n%s\n%s\n' "$CLIENT" "$ACTIVITY" "$PROJECT" "$START" >> "$ACTIVE"


	show "$(parseUnderscores $ACTIVITY)@$(parseUnderscores $PROJECT) started at $(dateSecondsToFormat "$START")"
}

createAndSaveStopEvent()
{
  START="$1"
  END="$2"
  ACTIVITY="$3"
  PROJECT="$4"

  local -r DURATION="Duration: $(diff "$START" "$END")"
  local -r ENDED="Ended at $(dateSecondsToFormat "$END")"
  local -r STARTED="Started at $(dateSecondsToFormat "$START")"
  local -r ACTIVITY="Activity: $ACTIVITY"
  local -r PROJECT="Project: $PROJECT"
  local -r CLIENT="Client: $CLIENT"

  printf '%s\n%s\n%s\n%s\n%s\n%s\n' "$DURATION" "$ENDED" "$STARTED" "$ACTIVITY" "$PROJECT" "$CLIENT" >> "$EVENT_FILE"
}

saveActivity()
{
  START="$1"
  END="$2"
  ACTIVITY="$3"
  PROJECT="$4"

  STARTED="Started at $(dateSecondsToFormat "$START")"
  ENDED="Ended at $(dateSecondsToFormat "$END")"
  DURATION="Duration: $(diff "$START" "$END")"

  printf '%s\n%s\n%s\n' "$STARTED" "$ENDED" "$DURATION" >> "$PROJECTS/$PROJECT/$ACTIVITY"

  if [[ "$GITSYNC" == "yes" ]]; then
      gitAdd "$CLIENT/$PROJECT/$ACTIVITY"
  fi
}

stopActivity()
{
  if [ ! -f "$ACTIVE" ]; then
      show "No timer active, start one?"
      return
  fi

  START=$(tail -n 1 "$ACTIVE")
  END=$(dateNow)
  ACTIVITY=$(tail -n 3 "$ACTIVE" | head -n 1)
  PROJECT=$(tail -n 3 "$ACTIVE" | head -n 2 | tail -n 1)

  saveActivity "$START" "$END" "$ACTIVITY" "$PROJECT"
  createAndSaveStopEvent "$START" "$END" "$ACTIVITY" "$PROJECT"
  rm "$ACTIVE"

  if [[ "$GITSYNC" == "yes" ]]; then
      gitPush "$ACTIVITY" "$PROJECT"
  fi

  show "Time entry added to $(parseUnderscores "$ACTIVITY")!"
}

updateActiveState()
{
  START="$1"
  ACTIVITY="$2"
  PROJECT="$3"

  rm "$ACTIVE"

  printf '%s\n%s\n%s\n%s\n' "$CLIENT" "$ACTIVITY" "$PROJECT" "$START" >> "$ACTIVE"
}

editRunning()
{
  if [ ! -f "$ACTIVE" ]; then
      show "No timer active, start one?"
      return
  fi

  START=$(tail -n 1 "$ACTIVE")
  ACTIVITY=$(tail -n 3 "$ACTIVE" | head -n 1)
  PROJECT=$(tail -n 3 "$ACTIVE" | head -n 2 | tail -n 1)

	CHOICE="$(show "Choose what to edit:" "Start Project Activity")"

	case "$CHOICE" in
        "Start")
            ANS=$(show "Enter new start time: ")
            if [ -z "$ANS" ]; then
                show "No change..."
                return
            fi
            START=$(dateFormatToSeconds "$ANS")
        ;;
        "Project")
            ANS=$(show "Enter new project name: " "$(ls $PROJECTS)")
            if [ -z "$ANS" ]; then
                show "No change..."
                return
            fi
            rmdir "$PROJECTS/$PROJECT" &> /dev/null
            PROJECT=$(parseSpaces "$ANS")

            if [ ! -d "$PROJECTS/$PROJECT" ]; then
                mkdir "$PROJECTS/$PROJECT"
            fi
        ;;
        "Activity")
            ANS=$(show "Enter new project name: " "$ACTIVITY $(ls $PROJECTS/$PROJECT)")
            if [ -z "$ANS" ]; then
                show "No change..."
                return
            fi
            ACTIVITY=$(parseSpaces "$ANS")
        ;;
        *)
        show "No such alternative, try agian"
        ;;
	esac

    updateActiveState "$START" "$ACTIVITY" "$PROJECT"

	show "$(parseUnderscores $ACTIVITY)@$(parseUnderscores $PROJECT) started at $(dateSecondsToFormat "$START")"
}

################
# Calculations #
################

diff()
{
  if [ "$1" -gt "$2" ]; then
    echo "diff would be negative, this is not allowed! Wrong order of parameters?"
    return 1
  fi

  ((DIFF = $2 - $1))
  ((SECONDS = DIFF % 60))
  ((MINUTES = (DIFF % 3600) / 60))
  ((HOURS = DIFF / 3600))

	echo "$HOURS:$MINUTES:$SECONDS"
}

sum()
{
    DURATION="$1"

    NEXT_H="$(sed -n -e 's/^\(.*\):\(.*\):\(.*\)/\1/p' <<<"$DURATION")"
    NEXT_M="$(sed -n -e 's/^\(.*\):\(.*\):\(.*\)/\2/p' <<<"$DURATION")"
    NEXT_S="$(sed -n -e 's/^\(.*\):\(.*\):\(.*\)/\3/p' <<<"$DURATION")"
    ((HOURS = HOURS + 10#$NEXT_H))
    ((MINUTES = MINUTES + 10#$NEXT_M))
    ((SEC = SEC + 10#$NEXT_S))

    ((HOURS = HOURS + (MINUTES + SEC / 60) / 60))
    ((MINUTES = (MINUTES + SEC / 60) % 60))
    ((SEC = SEC % 60))
}

extractAndSumEntries()
{
    LIMIT="$1"
    local COUNT=1

    while IFS= read -r line || [ -n "$line" ]; do
        case "$COUNT" in
            "1")
                local CLIENT_LINE="$line"
                CLIENT="$(cut -d' ' -f2 <<<"$CLIENT_LINE")"
                ;;
            "2")
                local PROJECT_LINE="$line"
                PROJECT="$(cut -d' ' -f2 <<<"$PROJECT_LINE")"
                ;;
            "3")
                local ACTIVITY_LINE="$line"
                ACTIVITY="$(cut -d' ' -f2 <<<"$ACTIVITY_LINE")"
                ;;
            "4")
                local START_TIME="$line"
                START_TIME_SEC="$(dateFormatToSeconds "$(cut -d' ' -f1,2 --complement <<<"$START_TIME")")"

                if [[ "$START_TIME_SEC" < "$LIMIT" ]]; then
                    break;
                fi
                ;;
            "5")
                # Not used at the moment
                #local END_TIME="$line"
                ;;
            "6")
                local DURATION="$line"
                if [ -a "$REPORTS/$CLIENT/$PROJECT" ]; then
                  OLD_DURATION="$(cat "$REPORTS/$CLIENT/$PROJECT")"

                  HOURS="$(sed -n -e 's/^\(.*\):\(.*\):\(.*\)/\1/p' <<<"$OLD_DURATION")"
                  MINUTES="$(sed -n -e 's/^\(.*\):\(.*\):\(.*\)/\2/p' <<<"$OLD_DURATION")"
                  SEC="$(sed -n -e 's/^\(.*\):\(.*\):\(.*\)/\3/p' <<<"$OLD_DURATION")"
                else 
                  HOURS="0"
                  MINUTES="0"
                  SEC="0"

                  if [ ! -d "$REPORTS/$CLIENT" ]; then
                    mkdir -p "$REPORTS/$CLIENT"
                  fi
                fi
                sum "$(cut -d' ' -f2 <<<"$DURATION")" #"$START_TIME" "$ACTIVITY" "$PROJECT" "$CLIENT"
                printf '%s\n' "$HOURS:$MINUTES:$SEC" > "$REPORTS/$CLIENT/$PROJECT"
                COUNT=0
                ;;
            *)
                printf '%s%s\n' "COUNT has invalid value: " "$COUNT"
                ;;
        esac
        COUNT=$((COUNT+1))
    done < <(tac "$EVENT_FILE")
}

sumEntries()
{
  if [[ -z "$1" ]]; then
      NOW="$(dateNow)"
      TWELVE_HOURS="$((3600*12))"
      LIMIT="$((NOW - TWELVE_HOURS))"
  else
      LIMIT="$(date --date "$1" +%s)"
  fi

  local HOURS=0
  local MINUTES=0
  local SEC=0

  extractAndSumEntries "$LIMIT"

  if [[ -f "$ACTIVE" ]]; then

      CLIENT=$(head -n 1 "$ACTIVE")
      PROJECT=$(tail -n 3 "$ACTIVE" | head -n 2 | tail -n 1)
      START=$(tail -n 1 "$ACTIVE")
      NOW=$(dateNow)
      DURATION="$(diff "$START" "$NOW")"

      if [ -a "$REPORTS/$CLIENT/$PROJECT" ]; then
        OLD_DURATION="$(cat "$REPORTS/$CLIENT/$PROJECT")"

        HOURS="$(sed -n -e 's/^\(.*\):\(.*\):\(.*\)/\1/p' <<<"$OLD_DURATION")"
        MINUTES="$(sed -n -e 's/^\(.*\):\(.*\):\(.*\)/\2/p' <<<"$OLD_DURATION")"
        SEC="$(sed -n -e 's/^\(.*\):\(.*\):\(.*\)/\3/p' <<<"$OLD_DURATION")"
      else 
        HOURS="0"
        MINUTES="0"
        SEC="0"

        if [ ! -d "$REPORTS/$CLIENT" ]; then
          mkdir -p "$REPORTS/$CLIENT"
        fi
      fi
      sum "$(cut -d' ' -f2 <<<"$DURATION")" #"$START_TIME" "$ACTIVITY" "$PROJECT" "$CLIENT"
      printf '%s\n' "$HOURS:$MINUTES:$SEC" > "$REPORTS/$CLIENT/$PROJECT"

  fi

  if [ "$(find "$REPORTS" -type f | wc -l)" -gt "0" ];then
    for REPORT in "$REPORTS"/*/*; do
      TOTAL="$(cat "$REPORT")"
      printf '%s:[%s]\n' "${REPORT#/*/*/*/*/*}" "$TOTAL" >> "$FINAL_REPORT"
    done
  else
    echo "No timers active for at least 12h:[0:0:0]" > "$FINAL_REPORT"
  fi

  show "Total time:" "$(parseSpaces "$(cat "$FINAL_REPORT")")" "vertical-list"
  rm -r "${REPORTS:?}"/*
}


sumActivity()
{
	ACTIVITY="$1"

    for DURATION in $(sed -n '0~3p' "$ACTIVITY" | cut -d' ' -f2); do
	    sum "$DURATION"
    done
}

sumProject()
{
	PROJECT="$1"

	for ACTIVITY in "$PROJECT"/*; do
		sumActivity "$ACTIVITY"
	done
}

summarize()
{
	PROJECT="$1"

	local HOURS=0
	local MINUTES=0
	local SEC=0

	ANS="$(show "Choose one activity, (a)ll activities or time or (q)uit" "$(ls $PROJECTS/$PROJECT)")"
	CHOICE="$(parseSpaces "$ANS")"

	case "$CHOICE" in 
    	"q")
        	exit
    	;;
    	"a")
        	sumProject "$PROJECTS/$PROJECT"
	        show "Total time = $HOURS:$MINUTES:$SEC"
    	;;
    	*)
        	pushd "$PROJECTS/$PROJECT" > /dev/null || exit
        	for ACTIVITY in *; do
            	if [[ "$CHOICE" == "$ACTIVITY" ]]; then
                	sumActivity "$PROJECTS/$PROJECT/$CHOICE"
	                show "Total time = $HOURS:$MINUTES:$SEC"
                	popd > /dev/null || exit
                	return
            	fi
        	done
        	show "Activity \"$CHOICE\" does not exist, try again or exit (q)."
        	summarize "$PROJECT"
        	;;
	esac
}

#############
# Main loop #
#############

main()
{
	if [[ ! -f "$ACTIVE" ]]; then
		chooseClient
		if [[ "$ANS" == "summarize" ]]; then
            main
            exit
        fi
	else
    	CLIENT=$(head -n 1 "$ACTIVE")
    	show "Client $(parseUnderscores "$CLIENT") is running a timer."
	fi
	PROJECTS="$CLIENTS/$CLIENT"

	while true; do
		ANS="$(show "$CLIENT: What do you want to do?" "start stop edit status summarize help switch quit")"
		CHOICE="$ANS"
    	case "$CHOICE" in
        	"start")
            	if [[ -f "$ACTIVE" ]]; then
                	show "A timer is already running..."
            	else
                	chooseProject "startActivity"
            	fi
            	;;
        	"summarize")
                ANS="$(show "Sum by time or project?" "time project")"
                case "$ANS" in
                    "time")
                        TIME="$(show "Sum entries from when? (leave empty for 12h)")"
                        sumEntries "$TIME"
                    ;;
                    "project")
                        chooseProject "summarize"
                    ;;
                esac
            ;;
        	"stop")
            	stopActivity
            ;;
        	"status")
            	showStatus
            ;;
        	"help")
            	show "TrackMe - A time tracking program" "Usage: trackme [option] Options: start        - start a timer stop         - stop a running timer, if one exists. status       - check status of running timer, if any. summarize    - summarize time for a specified project and/or activity "
            ;;
        	"switch")
            	main
            	exit
            ;;
            "edit")
                editRunning
            ;;
        	"quit")
            	exit
            ;;
    	esac
	done
}

#############
# Call main #
#############

main
