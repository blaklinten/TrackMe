#!/bin/bash

dateSecondsToFormat()
{
  date "$DATE_FORMAT" --date="@$1"
}

dateFormatToSeconds()
{
  date --date "$1" +%s
}

diff()
{
  if [ "$1" -gt "$2" ]; then
    echo "diff would be negative, this is not allowed! Wrong order of parameters?"
    return 1
  fi

  ((DIFF = $2 - $1))
  ((SECONDS = DIFF % 60))
  ((MINUTES = (DIFF % 3600) / 60))
  ((HOURS = DIFF / 3600))

	echo "$HOURS:$MINUTES:$SECONDS"

}

parseSpaces()
{
  ARGS="$*"
  echo "${ARGS// /_}"
}

show()
{
	INFO="$1"
	CHOICES="$2"

  if [ -n "$3" ] && [ "$3" = "vertical-list" ]; then
    echo "$CHOICES" | sed -e 's/ /\n/g' | dmenu -l 20 -i -p "$INFO"
  else
    echo "$CHOICES" | sed -e 's/ /\n/g' | dmenu -i -p "$INFO"
  fi

}

sum()
{
    DURATION="$1"

    NEXT_H="$(cut -d':' -f1 <<<"$DURATION")"
    NEXT_M="$(cut -d':' -f2 <<<"$DURATION")"
    NEXT_S="$(cut -d':' -f2 <<<"$DURATION")"
    ((HOURS = HOURS + 10#$NEXT_H))
    ((MINUTES = MINUTES + 10#$NEXT_M))
    ((SEC = SEC + 10#$NEXT_S))

    ((HOURS = HOURS + (MINUTES + SEC / 60) / 60))
    ((MINUTES = (MINUTES + SEC / 60) % 60))
    ((SEC = SEC % 60))
}

extractAndSumEntries()
{
  START_LIMIT="$1"
  END_LIMIT="$2"
  TARGET_PROJECT="$3"
  local COUNT=1
  local IS_INSIDE_TIME_SPAN="no"

  while IFS= read -r line || [ -n "$line" ]; do
    case "$COUNT" in
      "1")
        local CLIENT_LINE="$line"
        CLIENT="$(cut -d' ' -f2 <<<"$CLIENT_LINE")"
        ;;
      "2")
        local PROJECT_LINE="$line"
        PROJECT="$(cut -d' ' -f2 <<<"$PROJECT_LINE")"
        ;;
      "3")
        ;;
      "4")
        local START_TIME="$line"
        START_TIME_SEC="$(dateFormatToSeconds "$(cut -d' ' -f1,2 --complement <<<"$START_TIME")")"

        if [[ "$START_TIME_SEC" < "$START_LIMIT" ]]; then
            break;
        fi
        ;;
      "5")
        local END_TIME="$line"
        END_TIME_SEC="$(dateFormatToSeconds "$(cut -d' ' -f1,2 --complement <<<"$END_TIME")")"

        if [[ "$END_TIME_SEC" < "$END_LIMIT" ]]; then
          IS_INSIDE_TIME_SPAN="yes"
        fi
        ;;
      "6")
        if [ "$IS_INSIDE_TIME_SPAN" = "no" ] || [ "$PROJECT" != "$TARGET_PROJECT" ]; then
          COUNT=1
          continue
        fi

        local DURATION="$line"
        if [ -a "$REPORTS/$CLIENT/$PROJECT" ]; then
          OLD_DURATION="$(cat "$REPORTS/$CLIENT/$PROJECT")"

          HOURS="$(cut -d':' -f1 <<<"$OLD_DURATION")"
          MINUTES="$(cut -d':' -f2 <<<"$OLD_DURATION")"
          SEC="$(cut -d':' -f3 <<<"$OLD_DURATION")"
        else 
          HOURS="0"
          MINUTES="0"
          SEC="0"

          if [ ! -d "$REPORTS/$CLIENT" ]; then
            mkdir -p "$REPORTS/$CLIENT"
          fi
        fi
        sum "$(cut -d' ' -f2 <<<"$DURATION")" #"$START_TIME" "$ACTIVITY" "$PROJECT" "$CLIENT"
        printf '%s' "$HOURS:$MINUTES:$SEC" > "$REPORTS/$CLIENT/$PROJECT"
        COUNT=0
        ;;
      *)
        printf '%s%s\n' "COUNT has invalid value: " "$COUNT"
        ;;
    esac
      COUNT=$((COUNT+1))
  done < <(tac "$EVENT_FILE")
}

showSpinner()
{
  INFO="$1"
  SPINNER_SEED="$2"
  case $((SPINNER_SEED % 8)) in
    "0")
      SPINNER="|"
      ;;
    "1")
      SPINNER="/"
      ;;
    "2")
      SPINNER="―"
      ;;
    "3")
      SPINNER="\\"
      ;;
    "4")
      SPINNER="|"
      ;;
    "5")
      SPINNER="/"
      ;;
    "6")
      SPINNER="―"
      ;;
    "7")
      SPINNER="\\"
      ;;
  esac
  printf '\r\e[0K%s  %s' "$SPINNER"   "$INFO"
}
