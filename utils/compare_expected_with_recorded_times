#!/bin/bash

###########################################################################
# Compare the given expected times on the given dates to what is recorded #
###########################################################################

export CLIENTS="$HOME/.trackme"
export EVENT_FILE="$CLIENTS/events"
export REPORTS="$CLIENTS/reports"
export FINAL_REPORT="$REPORTS/final"

dateFormatToSeconds()
{
  date --date "$1" +%s
}

parseSpaces()
{
    echo "$@" | sed s/\ /\_/g
}

show()
{
	INFO="$1"
	CHOICES="$2"

  if [ -n "$3" ] && [ "$3" = "vertical-list" ]; then
    echo "$CHOICES" | sed -e 's/ /\n/g' | dmenu -l 20 -i -p "$INFO"
  else
    echo "$CHOICES" | sed -e 's/ /\n/g' | dmenu -i -p "$INFO"
  fi

}

sum()
{
    DURATION="$1"

    NEXT_H="$(cut -d':' -f1 <<<"$DURATION")"
    NEXT_M="$(cut -d':' -f2 <<<"$DURATION")"
    NEXT_S="$(cut -d':' -f2 <<<"$DURATION")"
    ((HOURS = HOURS + 10#$NEXT_H))
    ((MINUTES = MINUTES + 10#$NEXT_M))
    ((SEC = SEC + 10#$NEXT_S))

    ((HOURS = HOURS + (MINUTES + SEC / 60) / 60))
    ((MINUTES = (MINUTES + SEC / 60) % 60))
    ((SEC = SEC % 60))
}

extractAndSumEntries()
{
  START_LIMIT="$1"
  END_LIMIT="$2"
  TARGET_PROJECT="$3"
  local COUNT=1
  local IS_INSIDE_TIME_SPAN="no"

  while IFS= read -r line || [ -n "$line" ]; do
    case "$COUNT" in
      "1")
        local CLIENT_LINE="$line"
        CLIENT="$(cut -d' ' -f2 <<<"$CLIENT_LINE")"
        ;;
      "2")
        local PROJECT_LINE="$line"
        PROJECT="$(cut -d' ' -f2 <<<"$PROJECT_LINE")"
        ;;
      "3")
        ;;
      "4")
        local START_TIME="$line"
        START_TIME_SEC="$(dateFormatToSeconds "$(cut -d' ' -f1,2 --complement <<<"$START_TIME")")"

        if [[ "$START_TIME_SEC" < "$START_LIMIT" ]]; then
            break;
        fi
        ;;
      "5")
        local END_TIME="$line"
        END_TIME_SEC="$(dateFormatToSeconds "$(cut -d' ' -f1,2 --complement <<<"$END_TIME")")"

        if [[ "$END_TIME_SEC" < "$END_LIMIT" ]]; then
          IS_INSIDE_TIME_SPAN="yes"
        fi
        ;;
      "6")
        if [ "$IS_INSIDE_TIME_SPAN" = "no" ] || [ "$PROJECT" != "$TARGET_PROJECT" ]; then
          COUNT=1
          continue
        fi

        local DURATION="$line"
        if [ -a "$REPORTS/$CLIENT/$PROJECT" ]; then
          OLD_DURATION="$(cat "$REPORTS/$CLIENT/$PROJECT")"

          HOURS="$(cut -d':' -f1 <<<"$OLD_DURATION")"
          MINUTES="$(cut -d':' -f2 <<<"$OLD_DURATION")"
          SEC="$(cut -d':' -f3 <<<"$OLD_DURATION")"
        else 
          HOURS="0"
          MINUTES="0"
          SEC="0"

          if [ ! -d "$REPORTS/$CLIENT" ]; then
            mkdir -p "$REPORTS/$CLIENT"
          fi
        fi
        sum "$(cut -d' ' -f2 <<<"$DURATION")" #"$START_TIME" "$ACTIVITY" "$PROJECT" "$CLIENT"
        printf '%s' "$HOURS:$MINUTES:$SEC" > "$REPORTS/$CLIENT/$PROJECT"
        COUNT=0
        ;;
      *)
        printf '%s%s\n' "COUNT has invalid value: " "$COUNT"
        ;;
    esac
      COUNT=$((COUNT+1))
  done < <(tac "$EVENT_FILE")
}

compare()
{
  TARGET_CLIENT="$1"
  TARGET_PROJECT="$2"
  BILLED_TIME="$3"
  TARGET_START="$4"
  TARGET_END="$5"

  extractAndSumEntries "$(dateFormatToSeconds "$TARGET_START")" "$(dateFormatToSeconds "$TARGET_END")" "$TARGET_PROJECT"

  if [ "$(find "$REPORTS" -type f | wc -l)" -gt "0" ];then
    HOURS="$(cut -d':' -f1 <"$REPORTS/$TARGET_CLIENT/$TARGET_PROJECT")"
    MINUTES="$(cut -d':' -f2 <"$REPORTS/$TARGET_CLIENT/$TARGET_PROJECT")"
    FINAL_DURATION="$HOURS.$MINUTES"
    CURRENT_DIFF="$(bc -l <<<"$FINAL_DURATION - $EXP")"
    DIFFERENCE="$(bc -l <<<"$DIFFERENCE + $CURRENT_DIFF")"

    printf '%s->%s, Recorded time: [%s], Billed time: [%s], Diff = %s\nRunning diff = %s\n' \
      "$TARGET_START" \
      "$TARGET_END" \
      "$FINAL_DURATION" \
      "$BILLED_TIME" \
      "$CURRENT_DIFF" \
      "$DIFFERENCE" \
      >> ./DURATIONS
  else
    printf '%s\n' "No timers active for slot $TARGET_START -> $TARGET_END" >> ./DURATIONS
  fi
  rm -rf "${REPORTS:?}"/*
}

 # Main script
 if [ -z "$2" ];then
   echo "Usage: $0 <client> <project>"
   exit
 fi

DIFFERENCE=0
while read -r slot; do
  START="$(cut -d',' -f1 <<<"$slot")"
  END="$(cut -d',' -f2 <<<"$slot")"
  EXP="$(cut -d',' -f3 <<<"$slot")"
  echo "Comparing slot $START -> $END"
  compare "$1" "$2" "$EXP" "$START" "$END"
done < <(cut -d',' -f7,8,9 ~/Downloads/timeSheet.worker.list.csv)
echo "Total difference is $DIFFERENCE" >> ./DURATIONS

read -p"Remove reports? [y/N]"
if [ "$REPLY" = "y" ];then
  rm -rf ./*_DURATIONS
fi
