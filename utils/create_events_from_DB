#!/bin/bash

################################################################################
# Create events from the entries in FSDB, sort them and insert into event file #
################################################################################

source "./utils/constants"
source "./utils/helpers"

FILES="$(find "$CLIENTS" -type f -not -path 'trackmedata/.git*' -not -path 'trackmedata/.raw_data*' | wc -l | cut -d' ' -f1)"
FILE_COUNT=0
echo "Creating intermediate event file."

for CLIENT in "$CLIENTS"/*; do

  if [ "$CLIENT" = "$CLIENTS/active" ] || [ "$CLIENT" = "$CLIENTS/events" ] || [ "$CLIENT" = "$CLIENTS/reports" ] ; then
    ((FILE_COUNT += 1))
    continue
  fi

  printf '\r\e[0K%s\n' "Client: $CLIENT"

  for PROJECT in "$CLIENT"/*; do
    printf '\r\e[0K%s\n' "Projcet: $PROJECT"

    for ACTIVITY in "$PROJECT"/*; do
      printf '\r\e[0K%s\n' "Activity: $ACTIVITY"
      ((FILE_COUNT += 1))
      printf '\r\e[0K%s' "$FILE_COUNT files processed out of $FILES."
      COUNT=1
      while IFS= read -r line || [ -n "$line" ]; do
        case "$COUNT" in
          "1")
              START_TIME="$line"
              if ! START_TIME_SEC="$(dateFormatToSeconds "$(cut -d' ' -f1,2 --complement <<<"$START_TIME")")"; then
                echo "ERROR: start time <$START_TIME> is invalid!"
                exit
              fi
            ;;
          "2")
              END_TIME="$line"
              if ! END_TIME_SEC="$(dateFormatToSeconds "$(cut -d' ' -f1,2 --complement <<<"$END_TIME")")"; then
                echo "ERROR: end time <$END_TIME> is invalid!"
                exit
              fi
            ;;
          "3")
              DURATION="$(cut -d' ' -f2 <<<"$line")"
              printf '%s %s %s %s %s %s\n' \
                "$START_TIME_SEC" \
                "$END_TIME_SEC" \
                "$DURATION" \
                "${CLIENT##*/}" \
                "${PROJECT##*/}" \
                "${ACTIVITY##*/}" \
                >> "$EVENT_FILE"
              ((COUNT = 0))
            ;;
          *)
              echo "Error, count is too high"
            ;;
        esac
        ((COUNT = COUNT + 1))
      done<"$ACTIVITY"
    done
  done
done
printf '\r\e[0K%s\n' "$FILE_COUNT files processed out of $FILES."
printf '%s\n%s\n' "Done creating intermediate event file." "Sorting intermediate event file..."

sort -n "$EVENT_FILE" > "${EVENT_FILE}-sorted"

echo "Creating final events file"
LINES="$(wc -l "${EVENT_FILE}-sorted" | cut -d' ' -f1)"
LINE_COUNT=0
while read -r line; do
  ((LINE_COUNT += 1))
  if [ "$((LINE_COUNT % 10))" = "0" ]; then
    printf '\r\e[0K%s' "$LINE_COUNT lines processed out of $LINES."
  fi

  START_TIME="$(dateSecondsToFormat "$(cut -d' ' -f1 <<<"$line")")"
  END_TIME="$(dateSecondsToFormat "$(cut -d' ' -f2 <<<"$line")")"
  DURATION="$(cut -d' ' -f3 <<<"$line")"
  CLIENT="$(cut -d' ' -f4 <<<"$line")"
  PROJECT="$(cut -d' ' -f5 <<<"$line")"
  ACTIVITY="$(cut -d' ' -f6 <<<"$line")"

  printf '%s\n%s\n%s\n%s\n%s\n%s\n' \
    "Duration: $DURATION" \
    "Ended at $END_TIME" \
    "Started at $START_TIME" \
    "Activity: $ACTIVITY" \
    "Project: $PROJECT" \
    "Client: $CLIENT" \
    >> "$FINAL_EVENT_FILE"

done<"${EVENT_FILE}-sorted"
printf '\r\e[0K%s\n' "$LINE_COUNT lines processed out of $LINES."
